#!/usr/bin/perl
#:: The utility compares tar files created for selected directories with the actual content of the directory 
#:: It maintains history in a special directory (the default is /var/Dirhist_base) both as a set of tar files 
#:: and as the generations of each individual files changed in the particular directory.  
#::
#:: Copyright by Nikolai Bezroukov, 2010-2020 
#:: Released under Perl Artistic License
#::
#:: Designed to be run from cron Daily or hour invocations create the history of changes marked in the particular directory 
#:: which is helpful for a forensic investigation. The classic example is actions of multiple sysadmin on /etc/files. 
#:: It was actually written after one such SNAFU happened about 10 years ago. 
#:: 
#:: Also can be used for recovery of configuration files. 
#:: For example, when you accidentally propagate authentication related files (passwd, groups, shadow) from RHEL6 to RHEL 7.
#::
#:: --- Invocation
#::       dirfile <options> [<directory>]
#:: 
#:: NOTE: If argument is given it is interpreted as the directory and both ignore and watch files are ignored, even if specified 
#::
#:: --- OPTIONS:
#::
#::   -b -- base  (name of the tar archive to use as a reference point)
#::   -h -- this screen
#::   -v -- verbosity level
#::         0         -- no errors are displayed
#::         1 or -v   -- only "serious errors" are displayed (default)
#::         2 or -vv  -- only "serious errors" and "errors" are displayed
#::         3 or -vvv -- "serious errors", "errors" and "warnings" are displayed
#::
#::   -x file   -- absolute path to configuration fiels with files and subdirectories to ignore (default is the first in the list /var/Dirhist_base/dirhist_ignore.lst )
#::   -w file   -- absolute path to configuration files with files and subdirectories to watch  (default is the first in the list /var/Dirhist_base/dirhist_watch.lst ) 
#::   -e email  -- either file with the list of emails (one adress per line) or the list of emails (separated by comma) to email report, 
#::                if any of the watched files was changed.  
#::                The default list is picked up from the file ~/mail.lst file, if it exists (one line per address) 
#::
#--------------- Development History -----------------------------------------------------------------------------------
#
#++ Ver   Date         Who       Modification
#++ ===   ==========   ========  =========================
#++ 0.1   2010/03/11   BEZROUN   Initial implementation
#++ 0.2   2010/03/26   BEZROUN   Autoupdate to Archive directory introduced
#++ 0.3   2010/05/13   BEZROUN   subdirs are moved inside BASE_DIR
#++ 0.4   2011/03/10   BEZROUN   primary_admin can contain server type ("me@here.com:PROD")
#++ 0.5   2011/10/26   BEZROUN   key /root files included in comparison
#++ 0.6   2014/05/05   BEZROUN   Exclusion of files reworked
#++ 0.7   2014/05/22   BEZROUN   Critical files concept introduced. /etc/fstab is an example
#++ 0.8   2014/11/26   BEZROUN   Reports completly reworked. Only in case of important files emails are send.
#++ 0.81  2014/11/27   BEZROUN   Prefix ./ from files in changes report was eliminated but restored for extraction form tar archive
#++ 0.82  2014/11/28   BEZROUN   Deleted files in /etc are now also reported
#++ 0.83  2014/12/03   BEZROUN   Unable to extract file situation with tar archive is just reported, not abend the program
#++ 0.84  2014/12/11   BEZROUN   Changed the list of separatly watched file. added /var/spool/cron/root
#++ 0.85  2014/12/11   BEZROUN   Changes in logging and standartiuzation of logging infrastructure
#++ 0.86  2015/05/07   BEZROUN   Boot directory is contolled.End of line is obligatory for a message
#++ 0.87  2016/04/31   BEZROUN   Local storage moved to /var
#++ 0.88  2017/04/14   BEZROUN   blkid.tab added to ignored files list
#++ 0.89  2017/04/15   BEZROUN   set_utils changes destructive operations to echo if debug >=3
#++ 0.90  2017/08/08   BEZROUN   Monitoring extended to multiple directories. Directories are now created with 700 permissions (just in case)
#++ 0.91  2017/08/07   BEZROUN   removed baseline suffix from archives. It is useless
#++ 0.92  2019/10/04   BEZROUN   Instead of cd $SelectedDir && tar option -C in tar is used. 
#++ 1.00  2020/11/03   BEZROUN   Major rewrite. Code generalised for arbitraty set of directories.
#++ 1.10  2020/11/04   BEZROUN   Logic and diagnistics improved. 
#++ 1.11  2020/11/05   BEZROUN   Error with processing comments in config files fixed.  
#++ 1.20  2020/11/12   BEZROUN   Default location of mail_list and processing of option -m changed  
#++ 1.21  2020/11/16   BEZROUN   mail_list fixes reverted 
# ------------------------------------------ START --------------------------------------------
use v5.10.1;
use feature 'state';
use warnings;
use strict 'subs';

   $debug=0;
   $test_file='';
   $VERSION='1.21'; ;
   $SCRIPT_NAME='dirhist';
   chomp($today=`date +"%y%m%d_%H%M"`);
   chomp($HOSTNAME=`hostname -s`);   # we will always use short hostname in diagnistic messages
   set_utils();
   $HOME=$ENV{'HOME'};
     
#
# Initialization for logme
#
   @ermessage_db={}; # accumulates messages for each category (warning, errors and severe errors)
   @ercounter=(0,0,0,0);
   logme('V',2,3); # initialize logme so that it can be used in options 
   
#
# Default Parameters including BASE and LOG_DIR
#
   $MAIL_LIST='';                                       #CONFIG-ELIGIBLE: the list of comma separated email addressed to send the log  
   $BASE='/var/'.ucfirst($SCRIPT_NAME).'_base';         #CONFIG-ELIGIBLE: directory for tar files and generation of changed files 
   $EXCLUDED_FLIST="$BASE/$SCRIPT_NAME".'_ignore.lst';  #CONFIG-ELIGIBLE: the file with the list of excluded file and subdirectories for each watched firectory   
   $WATCHED_FLIST="$BASE/$SCRIPT_NAME".'_watch.lst';    #CONFIG-ELIGIBLE: the file with the list of watched file and subdirectories for each watched firectory  
   $WATCHED_DIRS='';
   $LOG_DIR="$BASE/Logs"; #CONFIG-ELIGIBLE:  The directory for logs. The default is /var/Dirhist_base
   `mkdir -p -m 700 $LOG_DIR` unless ( -d "$LOG_DIR" );
   $LOG_RETENTION_PERIOD=365;  #CONFIG-ELIGIBLE: Number of day logs are kept in the LOG_DIR directory. The default is 365 days (one year)
#
#  Process config file, if any 
#
   @CONFIG_LOCATIONS=("$HOME/.config/$SCRIPT_NAME.conf", "$HOME/$SCRIPT_NAME.conf","/etc/$SCRIPT_NAME.conf"); 
   for( $i=0; $i<@CONFIG_LOCATIONS; $i++ ){
      next unless( -f $CONFIG_LOCATIONS[$i] );
      get_config($CONFIG_LOCATIONS[$i]);
      last;
   }
   if( $WATCHED_DIRS ){
      $WATCHED_DIR_LIST=split(/,?\s+/,$WATCHED_DIRS)
   } 

#
# Process options, if any 
#   
   getopts("c:d:v:hl:m:e:w:x",\%options);
   if ( exists($options{'l'}) ) {
      # SYSLOG
      $LOG_DIR=$options{'l'};
      if( $LOG_DIR=~/^(.+)\:(\d+)/ ){
          $LOG_DIR=$options{'l'}=$1;
          $LOG_RETENTION_PERIOD=$2;
      }   
      `mkdir -p -m 700 $LOG_DIR` unless ( -d "$LOG_DIR" );      
   }

      
   banner(ucfirst($SCRIPT_NAME)." -- Syncronization of user accouns for classic Unix authentication files), Version $VERSION",$LOG_DIR,$LOG_RETENTION_PERIOD);
   standard_options(); 
   
   if( $debug>0 ){
      out("The program is working in debug mode $debug");
      logme('V',3,3); 
      autocommit("$HOME/Archive",0);
   }else{
      logme('V',3,3);
   }
      
   if( exists($options{'x'}) ){  
      $EXCLUDED_FLIST=$options{'x'};
      unless (-f $EXCLUDED_FLIST){
         abends("File $EXCLUDED_FLIST specified in option -x does not exists");
      }
   }
   
   if( exists($options{'w'}) ){  
      $WATCHED_FLIST=$options{'w'};
      unless (-f $WATCHED_FLIST){
         abends("File $WATCHED_FLIST specified in option -x does not exists");
      }
   }   
   
    if( exists($options{'m'}) ){  
      $MAIL_LIST=$options{'m'};
      if (-f $MAIL_LIST){
         get_mail_list($MAIL_LIST);
      }elsif( $mail_list=~/^.+?\@.+?\.\w+(,.+?\@.+?\.\w+)*$/ ){
         logme('W',"Mailing redirected to the address(es) $MAIL_LIST\n");
      }else{
         abends("The value of option -m ($mail_list) can't be intepreted as email address or a file with list of addresses");
      }         
   } 
   
   if (scalar($ARGV)>0) {
      if ( -d $ARGV[0]){
         $WATCHED_DIR_LIST=@ARGV
      }
      $EXCLUDED_FLIST=$WATCHED_FLIST='';      
   }   
  

#
# Exclusions should be prefixed by the directory in question. Comparison is via index function, not via regex
# as file names contain dots and possibly other regex characters.
#
        
   if( $EXCLUDED_FLIST && -f $EXCLUDED_FLIST){
          open( SYSIN,'<',$EXCLUDED_FLIST ) || abend("Can't open the file $BASE/files2report.lst for reading");
      while($line=<SYSIN> ){
         next if substr($line,0,1) eq '#';
         chomp($line);
         $line=$1 if $line=~/^(.*\S)\s+$/;         
         $cur_dir=$line; # first watched section 
         last;
      }
      $line=<SYSIN>;
      while($line ne undef  ){                
         chomp $line;         
         if( $line=~/^\S/ ){
            if( substr($line,0,1) eq '#'){
               $line=<SYSIN>;
               next;
            }                          
            chomp($line);
            $line=$1 if $line=~/^(.*\S)\s+$/; # line has trailing whitescpace
            $cur_dir=$line;
            $line=<SYSIN>;
            next;
         }  
              
         while($line=~/\s+\S/ ){
            # process continuation line. It always start with white space chanrater (\s)
            if( $line=~/^\s+(.*\S)\s*$/ ){
              $line=$1;
            }
            next unless($line);
            @entries=split(/\:/,$line);
            for($i=0; $i<@entries; $i++ ){
               $element=$entries[$i];
               $element_with_path="$cur_dir/$element";
               if ( substr($element,-1,1) eq '/' ){
                 if ( -d $element_with_path){ 
                    $IGNORED_DIR{$element_with_path}=1; # directories should have traling slash to distinguish them from files. 
                 }else{
                    logme('W',"The directory $element_with_path that you want to ignore does not exist on the server or is a symlink\n");
                 }   
               }else{
                  if( -f $element_with_path){ 
                    $IGNORED_FILE{$element_with_path}=1;
                  }else{
                    logme('W',"The file $element_with_path that you want to watch does not exist on the server or is a symlink \n");
                  } 
               }            
            }
            $line=<SYSIN>;
            last if ($line eq undef);
         }
     } #while;
   }else{
      logme('E',"No excluded files is used in this run\n");     
   }  
#
# Selected specially watched files -- IMPORTANT file list
#
   if( $WATCHED_FLIST && -f $WATCHED_FLIST){
      open(SYSIN,'<',$WATCHED_FLIST) || abend("Can't open the file $BASE/files2report.lst for reading");
      $watch_no=0;
      while($line=<SYSIN> ){
         next if substr($line,0,1) eq '#';
         chomp($line);
         $line=$1 if $line=~/^(.*\S)\s+$/;         
         $WATCHED_DIR_LIST[0]=$cur_dir=$line; # first watched section 
         last;
      }
      $line=<SYSIN>;
      while($line ne undef  ){                
         chomp $line;         
         if( $line=~/^\S/ ){
            if( substr($line,0,1) eq '#'){
               $line=<SYSIN>;
               next;
            }   
            $WATCHED_DIR_LIST[$watch_no++]=$cur_dir;# watched directory line
            $WATCHED_FILE{$cur_dir}=$ref_watched_file;
            $WATCHED_DIR{$cur_dir}=$ref_watched_dir;                   
            chomp($line);
            $line=$1 if $line=~/^(.*\S)\s+$/; # line has trailing whitescpace
            $cur_dir=$line;
            $line=<SYSIN>;
            next;
         }  
         {
            my (%CRITICAL_DIR,%CRITICAL_FILE);       
            while($line=~/\s+\S/ ){
               # process continuation line. It always start with white space chanrater (\s)
               if( $line=~/^\s+(.*\S)\s*$/ ){
                 $line=$1;
               }
               next unless($line);
               @entries=split(/\:/,$line);
               for($i=0; $i<@entries; $i++ ){
                  $element=$entries[$i];
                  if ( substr($element,-1,1) eq '/' ){
                    if ( -d "$cur_dir/$element"){ 
                       $CRITICAL_DIR{$element}=1; # directories should have traling slash to distinguish them from files. 
                    }else{
                       logme('S',"The directory $cur_dir/$element that you want to watch does not exist on the server or is a symlink\n");
                    }   
                  }else{
                     if( -f  "$cur_dir/$element"){ 
                       $CRITICAL_FILE{$element}=1;
                     }else{
                       logme('S',"The file $cur_dir/$element that you want to watch does not exist on the server or is a symlink \n");
                     } 
                  }            
               }
               $line=<SYSIN>;
               last if ($line eq undef);
            }
            $ref_watched_file=\%CRITICAL_FILE;
            $ref_watched_dir=\%CRITICAL_DIR;  
         }
      } #while
   }else{
      logme('E',"No watched files/dirs  config file ( $WATCHED_FLIST ) was used in this run\n");     
   }      
  
   
#
# MAIN LOOP
#   
my $ChangedWatchedLst='';
   $alert_no=0; # number of changes in watched file and files in watched sudirectories
   for ($watched_dir_no=0; $watched_dir_no<@WATCHED_DIR_LIST; $watched_dir_no++ ){
      $SelectedDir=$WATCHED_DIR_LIST[$watched_dir_no];
      out("\n========= PROCESSING THE DIRECTORY $SelectedDir =========\n");
      $ref_watched_file=$WATCHED_FILE{$SelectedDir}; # list of critical files
      $ref_watched_dir=$WATCHED_DIR{$SelectedDir}; # list of critical-dirs
      $rc=process_dir(); # now process this directory
      $alert_no+=$rc;
   }
   close SYSLOG; # Close log to make possible emailing to recipients.  

   if ($alert_no>0) {
      logme('I',"There are $alert_no changes in watched files and directories'"); 
      logme('I',"The list of changed files: $ChangedWatchedLst"); 
      if(length($ChangedWatchedLst)>80){
         $ChangedWatchedLst=substr($ChangedWatchedLst,0,100);
         $last_blank=rindex($ChangedWatchedLst,' ');
         $ChangedWatchedLst=substr($ChangedWatchedLst,0,$last_blank).' ... ';
      }   
      if ($mail_list) {
         ($max_msglevel==0) && print "Report mailed to $MAIL_LIST";
         `cat $LOG_FILE | mail -s "$HOSTNAME Dirhist report about $alert_no changed file(s): $ChangedWatchedLst" "$MAIL_LIST"`;
      }     
      logme('X','');
   } 
   exit $alert_no; 
  
sub process_dir
{ 
my @changed_files; # should be reinitialised on each entry
my %what_changed; # should be reinitialised on each entry
#
# Set Directories
#
   $DirSubfolder=substr($SelectedDir,1); # delete '/'
   $DirSubfolder=~tr[/][_];
   $ArchiveDir="$BASE/$DirSubfolder/Archives";
   $DiffDir="$BASE/$DirSubfolder/Diffs";
   $HistDir="$BASE/$DirSubfolder/History";
   mkdirs($ArchiveDir,$DiffDir,$HistDir); # create all three major directory in the SelectedDir subfolder. 

#
# Baseline archive name
#
   if ( substr($SelectedDir,0,1) ne '/' ){
      abend(__LINE__,"Not an absolute name for the directory\n");
   }
my $TarballName=substr($SelectedDir,1); # name without extention .tar 
   $TarballName =~ tr[\/][^];
   $TarballFname=$TarballName.'.tar'; # tarball name with extention 

   unless ( -f "$ArchiveDir/$TarballFname" ) {
      logme('E',"Baseline tarball for the directory $SelectedDir does not exist: creating new at $ArchiveDir/$TarballFname");
      `tar cvf $ArchiveDir/$TarballFname -C $SelectedDir . `;
      return;
   }
   logme('W','Baseline used: '.`ls -l $ArchiveDir/$TarballFname`);
  
#
# Directory changes database
# Currently is done using tar, as tar has comparison option. But can be done using a different archiver.

   @changed_files=`tar -df $ArchiveDir/$TarballFname -C $SelectedDir  2>&1`;
   return 0 if scalar(@changed_files)==0; # does not make any sense to process this directory further
#
# process them one-by-one, filtering those file that you do not care about (noise)
#
   foreach $file (@changed_files) {
      if (substr($file,0,4) eq 'tar:') {
          $file=substr($file,5);
      }
      ($file,$what)=split(/\:\s+/,$file,2);
      chomp($what);
      if (index($what,"Cannot stat")> -1) {
         logme('S',"$file was removed ($what)");
         next;
      }
      ($debug) && print "changed: $file,$what\n";
      $file=~s/^\.\///; # remove prefix
      if (exists($what_changed{$file}) ) {
         $what_changed{$file} .= ", $what"; # add to the descriotion of change bacuse tar list each change on a separate line
      }else{
         $what_changed{$file} = "$what";
      }
   }
   
   
my $changed_watched_file_no=0; #total number of changed files classified as "watched" or residing in the watched directories  
   foreach $file ( keys %what_changed ){
      $is_changed=0;
      $file_with_path=$SelectedDir.'/'.$file;
      next if exists($IGNORED_FILE{$file_with_path});
      $last_slash=rindex($file,'/');
      if( $last_slash > -1) {
         $fpath=substr($file,0,$last_slash+1);
         next if exists($IGNORED_DIR{"$SelectedDir/$fpath"});
      }else{
         $fpath='';
      }  
      
      if( exists( $$ref_watched_file{$file}) ){
         logme('E',"Watched file $file_with_path changed: $what_changed{$file} ");        
         $is_changed=1;
      }elsif( $fpath && exists( $$ref_watched_dir{$fpath}) ){
         logme('E',"File $file in watched directory $SelectedDir/$fpath changed $what_changed{$file} ");
         $is_changed=1;
      } 
      
      if( $is_changed ){      
         logme('W','Old version: '.`$LS -l $HistDir/$file`); 
         logme('W','New version: '.`$LS -l $SelectedDir/$file`); 
         $changed_watched_file_no++; #total number of changed files 
         $ChangedWatchedLst.=" $SelectedDir/$file";
      } 
      
      #
      # Update history from the tar file. File with path is flattened by replacing with '^'
      #
             
      if( -f "$HistDir/$file" ){
         chomp($timestamp=`date -r $HistDir/$file "+%y%m%d"`);
         shell("mv $HistDir/$file $HistDir/$file.$timestamp"); # preserve previous version in History tree 
      }
      shell(qq(cd $HistDir && tar xvf $ArchiveDir/$TarballFname "./$file")); # restores the file with path
      unless ( -f "$HistDir/$file" ) {
         logme('S',"INTERNAL: Unable to extract file ./$file from $ArchiveDir/$TarballFname");
         next;
      }
      
      $diff='';
      if( index(`file $file_with_path`,'text')>-1 ) {
         # NOTE: diff makes sense only for text files
         $diff=`$DIFF $HistDir/$file $file_with_path`;
         chomp($diff);
         next unless ($diff);
         #
         # There are differences
         #
         ($debug) && print "Diff file was created for $file\n";
         $current_ls=`$LS -l  $file_with_path`;
         $previous_ls=`$LS -l $HistDir/$file`;            
         $diff_file=$file;
         $diff_file =~ tr[\\][^];
         chomp($timestamp=`date -r $file_with_path "+%y%m%d"`);
         open (SYSDIFF, ">>$DiffDir/$diff_file.$today");
         print SYSDIFF "=== DIFFERENCES FOR '$file_with_path' dated $timestamp ===\n\nCurrent: $current_ls Previous: $previous_ls $diff\n\n===\n\n";
         close SYSDIFF;
         ($is_changed) && diff2log($file_with_path,$diff); # Report only for wantched files 

      }   
   } # foreach
   
   if ($changed_watched_file_no==0){
      logme('I',"No changes in watched files and subdirectoriues in the directory $SelectedDir occured since the last run\n");
   }else{
      logme('I',"$changed_watched_file_no watched file or files in watched sudirectiories were changed in the directory $SelectedDir since the last run\n");
   }   
   #
   # Move tar archive to new name with time stamp (creation date) and create a new tar archive
   #
   if (scalar(@changed_files)>0){
      chomp($timestamp=`date -r $ArchiveDir/$TarballFname "+%y%m%d_%H%M"`);
      shell("mv $ArchiveDir/$TarballFname $ArchiveDir/$TarballName$timestamp.tar && gzip -f $ArchiveDir/$TarballName$timestamp.tar");
      ($debug==0) && `tar cvf $ArchiveDir/$TarballFname -C $SelectedDir .`; # renew baseline only for debug=0    
   }
   return $changed_watched_file_no;
} # process_dir  

sub diff2log
{
my ($subject,$diff_string)=@_;
   out("One way delta extracted from diff file for $subject");
my @diff=split(/\n/,$diff_string);    
   for( my $i=0;$i<@diff;$i++ ){
      if( substr($diff[$i],0,1) eq '>' || substr($diff[$i],0,1)=~/\d/ ){
         out($diff[$i]);
      }  
   } 
} # diff2log

sub savefile 
# Save file with original timestamp as extension
{
my $filepath=$_[0];
my $TARGET_DIR=$_[1];
my $filename=$_[2];
my $filestamp;
    if (length($filename)==0 || length($filepath)==0 || length($TARGET_DIR)==0) {
       abend(__LINE__,"Wrong arguments to savefile: filepath=$filepath,TARGET_DIR=$TARGET_DIR,filename=$filename\n"); 
    }
   if (-f "$TARGET_DIR/$filename") {
      $filestamp=`date -r "$TARGET_DIR/$filename" +"%y%m%d_%H%M"`; chomp($filestamp);
      shell("$MV $TARGET_DIR/$filename $TARGET_DIR/$filename.$filestamp");
   }
   shell("$CP -p $filepath $TARGET_DIR"); # save latest version in HISTORY with org timestamp and attributes. 
} # savefile

sub get_mail_list
# slurps $ENV{$HOME}/mail.lst and extracts email adress from it. If does not exist tries to extract email address from /etc/passwd root record. 
{
my $mail_list_file;   
   if(scalar(@_)>0) {
      $mail_list_file=$_[0];
   }else{
      $mail_list_file="$ENV{$HOME}/mail.lst"
   }   
      
   if ( -f $mail_list_file ) {
     chomp($mail_list=`cat $mail_list_file`);   
     $MAIL_LIST=~tr/\n/ /; # convert the lsit into a space separated string (spaces         
     return $MAIL_LIST;
   }else{
     $MAIL_LIST=`grep -P '^root' /etc/passwd`;
     my @F=split(/:/,$mail_list);
     $MAIL_LIST=$F[4];        
   }  
   if( index($MAIL_LIST,'@')>=1 ){
      return $MAIL_LIST;
   }else{
      logme('S','Unable to detect default_mail_list for the server'); 
      return '';
   }     
}
#================================================================
# Standard subroutines -- version 3.00 (Dec 11, 2014)
#================================================================ 
  
sub abs 
{
   return -$_[0] if ($_[0] <0 );  
   return $_[0];
}

sub shell 
{
   if ($debug) { logme('I',"command: $_[0]\n");}
   `$_[0]`;
}
sub set_utils
{
  $LS='/bin/ls';
  $MAIL='/bin/mail';
  #$CAT='/bin/cat';
  $MV='/bin/mv';
  $CP='/bin/cp';
  $DIFF='/usr/bin/diff';
  #$LAST='/usr/bin/last'; 
  #$GREP='/bin/grep';
  $MAIL='/bin/mail';
  if ($debug>=3) {
     $MAIL='echo';
     $MV='echo';
     $CP='echo';
     $MAIL='echo';
  }  
  
}

# ===================================================================
# softpano.pm -- Set of standard softpanorama subroutines for logging
# ===================================================================
sub autocommit
{
# parameters
my ($archive_dir,$use_git)=@_; #Script name can be with ewxprentionpl or without. 
#
#  Local vars
#
my $build_timestamp;
my $script_delta=1;
my $file=$0;
      if( ($last=rindex($0,'/'))>-1 ){ $file=substr($0,$last+1);}
      ( ! -d $archive_dir ) && `mkdir -p $archive_dir`;
      if(  -f "$archive_dir/$file"  ){
         if( (-s $0 ) == (-s "$archive_dir/$file")   ){
            `diff $0 $archive_dir/$file`;
            $script_delta=( $? == 0 )? 0: 1;
         }
         if( $script_delta ){
            chomp($build_timestamp=`date -r $archive_dir/$file +"%y%m%d_%H%M"`);
            `mv $archive_dir/$file $archive_dir/$file.$build_timestamp`;
         }
      }
      if(  $script_delta){
         `cp -p $0 $archive_dir/$file`;
          ($use_git) && `cd $archive_dir && git commit $archive_dir/$file`; # autocommit
      }
} # autocommit

sub get_config
{
my $config_file=$_[0];
my @conf=`cat $config_file`;
my ($line,$i);
   for( $i=1; $i<@conf; $i++ ){
      chomp($line=$conf[$i]);
      if( substr($line,0,1) eq '#' ){
         $conf[$i]='';
         next;
      }
      if( $line eq '' || $line=~/^\s*$/ ){
         $conf[$i]=''; # emply line
         next;
      }
      if( $line=~/^\s*(.*\S)\s*$/ ){
         $line=$1;
      }
      if( $line=~/^(\w+)\s*=\s*['"](.*?)['"]/ ){
         if( $2=~tr/'"// ){
            die(qq(Wrong value $1 in line $i of config file $config_file -- string parameter can't contain ' or "" within its value.));
         }
         $conf[$i]='$'.uc("$1")."='$2'"; # force upper case
      }elsif( $line=~/^(\w+\s*=\s*\d+)/ ){
         $conf[$i]='$'.uc("$1"); # force upper case 
      }else{
         print "Line $i ($line) in config file $config_file  is not recognizable configuration statement and was skipped\n";
      }
   }
   if( $debug ){
      print join("\n",@conf),"\n";
   }
   for( $i=1; $i<@conf; $i++ ){
      next unless($conf[$i]);
      eval($conf[$i]);
   }
   return 0;
} # get_config
sub standard_options
{
   helpme() if exists $options{'h'};
   if( exists($options{'d'}) ){
      if( $options{'d'} =~/^(\d)\:(.*)$/ ){
         $debug=$1;
         $test_file=$2;
      }elsif( $options{'d'}=~/\d/ ){
         $debug=$options{'d'};
      }else{
         die("Wrong value of option -d ($options{'d'}).Should be iether single digit of digit and test user like -d '2:frankj'\n\n");
      }   
   }    
  
   if( exists $options{'v'} ){
      if(  $options{'v'}>=0 && $options{'v'}<=3){
         logme('V',$options{'v'},$options{'v'});
      }else{
         logme('E','The value of option v (number of parallel transfers) is outside the range 0..3. 3 assumed');
         logme('V',3,3);
      }
   }

   if(  exists  $options{'c'}  ){
      $config_file=$options{'c'};
      if( -f $config_file && -r $config_file ){
         get_config($config_file);
      }else{
         abend("Config file $config_file does not exists, or does not have read permissions for the user\n\n");
      }
   }
}

sub logme
# logme: Standard SP package diagnostic messages generator. Version 2.8 (Nov 1, 2020)
{
my ($package, $filename, $lineno) = caller;
# two special types messages 'V' -- set verbosity and 'X' print summary. 
   if( $_[0] eq 'V' ){
      # set verbosity NOTE: Call logme('V') simply prints the content of the buffer. Useful in processing of options for defering messages until LOR_DIR is set. 
      $min_msglevel1=length("WEST")-$_[1]-1; # verbosity 3 is max and means cut level is 4-3-1=0  -- the index corresponding to code 'W'
      $min_msglevel2=length("WEST")-$_[2]-1; # same for log only (like in MSGLEVEL in mainframes ;-)
      return;
   }elsif( $_[0] eq 'X' ){
      my $summary=''; # string which contains stat of how many  messages of each type were generated (including supressed).       
      for( my $i=0; $i<=length('WEST'); $i++ ){
         next unless( $ercounter[$i] );
         $summary.=" ".substr('WEST',$i,1).": ".$ercounter[$i];
      } # for
      ( scalar(@_)>1 ) && out($_[1],"\n=== MESSAGES SUMMARY $summary ===\n");
      if( $ercounter[1] + $ercounter[2] ){
         out("$ermessage_db[1]\n") if $ercounter[1]>0; # reproduce all errors
         out("$ermessage_db[2]\n") if $ercounter[2]>0; # reproduce all severe errors 
      }
      return;
   } #if
#
# Now let's process "normal message", which should have W,E,S, or T severity code.
#
my $ercode=uc(substr($_[0],0,1)); # Parameter 1 -- message code. It can be several letters long, not only a single letter
# my $ersuffix=(length($_[0])>1) ? substr($_[0],1,1):''; # suffix of error code currently is unused. 
chomp( my $message=$_[1]); #Parameter 2 -- text of the message (see ercode -- Parameter 1 prcessed below) 
     $message="$SCRIPT_NAME\-$ercode$lineno: $message"; # Form diagnostic message with error code, line number and the text of the message
my   $severity=index("WEST",$ercode);
     if( $severity==-1){
         out($message); # informational 'I' messages and messages with wrong error code. 
         return;
     }
     $ercounter[$severity]++; # Increase messages counter for given severity (supressed by verbosity setting messages are counted too)
     return if(  $severity<$min_msglevel1 && $severity<$min_msglevel2 ); # no need to process if this is lower then both msglevels
#----------------- Error history -------------------------
      if( $severity > 0 ){ $ermessage_db[$severity] .= "\n\n$message";} # this DB actually can serve as a buffer during processing of options
#--------- Message printing and logging --------------
      # We treat separatly verbosity for log and console.
      # Out of four legit error codes W,E,S and T, only T is unsupressable         
      # $min_msglevel2 defines writing to SYSLOG. 3 (default) means all (Warning, Errors and Severe errors) to be printed
      if( $severity==2 ){
          $message=("=" x length($message))."\n".$message."\n".("=" x length($message))."\n";
      }    
      ($severity >= $min_msglevel1) && print STDERR "$message\n"; # warnings and errors
      ($severity >= $min_msglevel2) && print SYSLOG "$message\n";
 } # logme

sub out
#direct output of lines suppled as parameters
#Unlike logme it can accept multipile lines. Use out('') for spaceline.
{
   for( my $i=0; $i<@_; $i++ ){
      print STDERR "$_[$i]\n";
      print SYSLOG "$_[$i]\n";
   }
} # out

sub abend
#print diagnostic and terminate the script
{
my $message;
my ($package, $filename, $lineno) = caller;
   $message="$SCRIPT_NAME-T$lineno $_[0]. Exiting...\n\n";
   out($message); # Syslog might not be available but STDERR always is 
   exit 255;
} # abend

sub banner {
#print banner and clean LOG_DIR
my $title=$_[0]; 
my $LOG_DIR=$_[1];
my $LOG_RETENTION_PERIOD=$_[2];
my $rc=( -d $LOG_DIR ) ? `find $LOG_DIR -name "*.log" -type f -mtime +$LOG_RETENTION_PERIOD -delete` : mkdir($LOG_DIR,700) ; # cleanup
   chomp(my $timestamp=`date +"%y%m%d_%H%M"`);
   $LOG_FILE="$LOG_DIR/$SCRIPT_NAME.$timestamp.log";
   open(SYSLOG,'>',$LOG_FILE) || die("Fatal error: unable to open $LOG_FILE");
   chomp($timestamp=`date "+%y/%m/%d %H:%M"`);   
   chomp( my $BUILD_DATE=`date -r $0 +"%y%m%d_%H%M"`);
   $title.="( Build $BUILD_DATE ). Date: $timestamp";
   out('',$title,"Logs are at $LOG_FILE. Type -h for help.",('=' x length($title)),'');
}

sub mkdirs
# sub mkdirs: create multiple directories using option -p
{
   foreach( @_ ){
      next if(  -d $_);
      system("mkdir -p $_");
      abend("Can't create directory $_") unless ( -d $_ );
   }
}
sub helpme
{
   open(SYSHELP,'<',$0);
   while($line=<SYSHELP>) {
      if ( substr($line,0,3) eq "#::" ) {
         print substr($line,3);
      }
   } # for
   close SYSHELP;
   while(<DATA>){
      print " $_";
   } # while
   exit 0;
}
sub getopts
{
my ($options_def,$options_hash)=@_;
my ($first,$rest,$pos,$cur_opt);
   while(@ARGV){
      $cur_opt=$ARGV[0];
      last if( substr($cur_opt,0,1) ne '-' );
      if(  $cur_opt eq '--'){
          shift @ARGV;
          last;
      }
      $first=substr($cur_opt,1,1);
      $pos = index($options_def,$first);
      if( $pos==-1){
         warn("Undefined option -$first skipped without processing\n");
         shift(@ARGV);
         next;
      }
      $rest=substr($cur_opt,2);
      if( $pos<length($options_def)-1 && substr($options_def,$pos+1,1) eq ':' ){
         # option with parameters
         if( $rest eq ''){
           shift(@ARGV); # get the value of option
           unless( @ARGV ){
              warn("End of line reached for option -$first which requires argument\n");
              $$options_hash{$first}='';
              last;
           }
           if(   $ARGV[0] =~/^-/ ){
               warn("Option -$first requires argument\n");
               $$options_hash{$first} = '';
           }else{
               $$options_hash{$first}=$ARGV[0];
               shift(@ARGV); # get next chunk
           }
         }else{
            #value is concatenated with option like -ddd
            if( ($first x length($rest)) eq $rest ){
               $$options_hash{$first} = length($rest)+1;
            }else{
               $$options_hash{$first}=$rest;
            }
            shift(@ARGV);
         }
      }else {
         $$options_hash{$first} = 1; # set the option
         if(  $rest eq ''){
            shift(@ARGV);
         }else{
            $ARGV[0] = "-$rest"; # there can be other options without arguments after the first
         }
      }
   }
}
__DATA__
Thus utility creates a directory (the default is /var/Dirhist_base ) and a subdirectory for each watched directories in it.

As this utility normally runs from cron the excluded and  eatched fioela re specified in two files
  
  /var/Dirhist_base/dirhist_ignore.lst 
  /var/Dirhist_base/dirhist_watch.lst
  
Those can be changed via the configuration file via optiox -x and -w  

For a test run on a certain directory you can specify the directory (or serveral directories) is argumnents to the program
in this case no excluded files or watched files can be specified becuase they contain the list directories in thie own right. 

All files shich can be set via iptions also can be set via config file with setting YAMP-stle dictionary format 